/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaBoy;

import JavaBoy.cartridge.Cartridge;
import JavaBoy.cpu.CPU;
import JavaBoy.cpu.flags.FlagBank;
import JavaBoy.cpu.instructions.*;
import JavaBoy.cpu.interrupts.InterruptManager;
import JavaBoy.cpu.registers.Register16;
import JavaBoy.cpu.registers.RegisterBank;
import JavaBoy.debug.DebugMemory;
import JavaBoy.gui.GBGui;
import JavaBoy.memory.Dma;
import JavaBoy.memory.MemoryMap;
import JavaBoy.memory.MemorySlot;
import JavaBoy.timer.Timer;
import JavaBoy.video.*;
import JavaBoy.video.pixelpipeline.DmgFifo;
import JavaBoy.video.pixelpipeline.FIFOFetcher;
import JavaBoy.video.pixelpipeline.PixelFIFO;

import java.io.File;
import java.util.ArrayList;

public class JavaBoy {
    public static void main(String[] args) {
        File file = new File(JavaBoy.class.getResource(
                "/gb-test-roms/cpu_instrs/individual/10_bit_ops.gb").getFile());
        Cartridge cart = new Cartridge(file);

        Instruction[] instructions = new Instruction[]{
                new Add(),
                new And(),
                new CB(new Instruction[]{
                        new Bit(),
                        new Swap(),
                        new Reset(),
                        new Set(),
                        new RotateCB(),
                        new Shift()
                }),
                new Call(),
                new CCF(),
                new Cp(),
                new CPL(),
                new Daa(),
                new Dec(),
                new DI(),
                new EI(),
                new Inc(),
                new Jump(),
                new Load(),
                new Nop(),
                new Or(),
                new Pop(),
                new Push(),
                new Return(),
                new Rotate(),
                new SCF(),
                new Sub(),
                new Xor()
        };
        InterruptManager manager = new InterruptManager();
        Timer timer = new Timer(manager);
        var memSlots = new ArrayList<MemorySlot>();

        MemoryMap map = new MemoryMap(
                memSlots
        );
        LCDC lcdc = new LCDC();
        LCDStat lcdStat = new LCDStat();
        GpuRegisters gpuRegisters = new GpuRegisters();
        Oam oam = new Oam();
        Palette palette = new Palette();
        Vram vram = new Vram();
        PixelFIFO oamFifo = new DmgFifo(palette);
        PixelFIFO bgFifo = new DmgFifo(palette);
        FIFOFetcher fetcher = new FIFOFetcher(oamFifo, bgFifo, vram, lcdc,
                                              gpuRegisters);
        GBGui gui = new GBGui();
        Gpu gpu = new Gpu(gui, lcdc, lcdStat, gpuRegisters, oam, palette, vram,
                          fetcher, oamFifo, bgFifo, manager);
        Dma dma = new Dma(map);
        memSlots.add(dma);
        memSlots.add(gpu);
        memSlots.add(cart);
        memSlots.add(timer);
        memSlots.add(manager);
        memSlots.add(new DebugMemory());



        RegisterBank registers = new RegisterBank(new FlagBank(),
                                                  new Register16(),
                                                  new Register16());
        CPU cpu = new CPU(map, instructions, registers, manager, timer, dma, gpu);
        gui.show();
        new Thread(gui).start();
        cpu.run();
    }

    public String getGreeting() {
        return "Hello world.";
    }
}
