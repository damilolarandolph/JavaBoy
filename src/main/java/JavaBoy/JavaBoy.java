/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaBoy;

import JavaBoy.cartridge.Cartridge;
import JavaBoy.cpu.CPU;
import JavaBoy.cpu.flags.FlagBank;
import JavaBoy.cpu.instructions.*;
import JavaBoy.cpu.interrupts.InterruptManager;
import JavaBoy.cpu.registers.Register16;
import JavaBoy.cpu.registers.RegisterBank;
import JavaBoy.debug.DebugMemory;
import JavaBoy.gui.GBGui;
import JavaBoy.input.Joypad;
import JavaBoy.memory.Dma;
import JavaBoy.memory.MemoryMap;
import JavaBoy.memory.MemorySlot;
import JavaBoy.timer.Timer;
import JavaBoy.video.*;
import JavaBoy.video.pixelpipeline.DmgFifo;
import JavaBoy.video.pixelpipeline.FIFOFetcher;
import JavaBoy.video.pixelpipeline.PixelFIFO;

import java.io.File;

public class JavaBoy {
    public static void main(String[] args) {
        //File file = new File(JavaBoy.class.getResource(
         //       "/gb-test-roms/cpu_instrs/individual/02_interrupts.gb").getFile());
        //File file = new File("/home/damilola/Downloads/Dr. Mario (JU) (V1.1).gb");

        if (args.length == 0){
            System.err.println("Expected at least one argument !");
            System.exit(1);
        }

        File file = new File(args[0]);
        Cartridge cart = new Cartridge(file);


        var load = new Load();
        var add = new Add();
        var and = new And();
        var call = new Call();
        var ccf = new CCF();
        var cp = new Cp();
        var cpl = new CPL();
        var daa = new Daa();
        var ei = new EI();
        var dec = new Dec();
        var di = new DI();
        var inc = new Inc();
        var jump = new Jump();
        var nop = new Nop();
        var or = new Or();
        var pop = new Pop();
        var push = new Push();
        var reset = new Reset();
        var ret = new Return();
        var rotate = new Rotate();
        var rotateCB = new RotateCB();
        var scf = new SCF();
        var set = new Set();
        var shift = new Shift();
        var sub = new Sub();
        var swap = new Swap();
        var xor = new Xor();

        var bit = new Bit();

        var cb = new CB(new Instruction[]{
                bit, rotateCB, reset, set, shift, swap,
        });

        InterruptManager manager = new InterruptManager();
        Timer timer = new Timer(manager);

        MemoryMap map = new MemoryMap();
        LCDC lcdc = new LCDC();
        LCDStat lcdStat = new LCDStat();
        GpuRegisters gpuRegisters = new GpuRegisters();
        Oam oam = new Oam();
        Palette palette = new Palette();
        Vram vram = new Vram();
        PixelFIFO oamFifo = new DmgFifo(palette);
        PixelFIFO bgFifo = new DmgFifo(palette);
        FIFOFetcher fetcher = new FIFOFetcher(oamFifo, bgFifo, vram, lcdc,
                                              gpuRegisters, oam.getSpritesBuffer());
        Joypad joypad = new Joypad(manager);
        GBGui gui = new GBGui(joypad);
        Gpu gpu = new Gpu(gui, lcdc, lcdStat, gpuRegisters, oam, palette, vram,
                          fetcher, oamFifo, bgFifo, manager);
        Dma dma = new Dma(map);
        map.setSlots(new MemorySlot[]{
                cart,
                oam,
                dma,
                lcdc,
                gpuRegisters,
                lcdStat,
                joypad,
                palette,
                vram,
                timer,
                manager,
                new DebugMemory(),
        });


        RegisterBank registers = new RegisterBank(new FlagBank(),
                                                  new Register16(),
                                                  new Register16());
        CPU cpu = new CPU(map, new Instruction[]{
                jump,
                add,
                sub,
                and,
                call,
                cb,
                ccf,
                cp,
                cpl,
                daa,
                dec,
                di,
                ei,
                inc,
                nop,
                or,
                pop,
                push,
                ret,
                rotate,
                scf,
                xor,
                load,
        }, registers, manager, timer,
                          dma,
                          gpu);


        gui.show();
        cpu.run();
    }

    public String getGreeting() {
        return "Hello world.";
    }
}
